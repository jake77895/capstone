<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Rank Tier List</title>
</head>
<body>
  <div style="display: flex; flex-wrap: wrap; width: 100%;">

    <!-- Main Container: -->
    <div style="flex: 3 1 60%; padding: 20px; box-sizing: border-box;">
      <h1><%= @tier_list.name.capitalize %></h1>
      <p>This container takes up 3/4 of the page width on larger screens and resizes dynamically on smaller screens.</p>
      <!-- Add more content as needed -->

    <!-- Tier List Container -->
    <div class="tier-list">

      <!-- S Tier -->
      <div class="tier-row">
          <div class="tier-label tier-s">S</div>
          <div class="tier-items" id="tier-s">
              <!-- Items for S tier will go here -->
          </div>
      </div>

      <!-- A Tier -->
      <div class="tier-row">
          <div class="tier-label tier-a">A</div>
          <div class="tier-items" id="tier-a">
              <!-- Items for A tier will go here -->
          </div>
      </div>

      <!-- B Tier -->
      <div class="tier-row">
          <div class="tier-label tier-b">B</div>
          <div class="tier-items" id="tier-b">
              <!-- Items for B tier will go here -->
          </div>
      </div>

      <!-- C Tier -->
      <div class="tier-row">
          <div class="tier-label tier-c">C</div>
          <div class="tier-items" id="tier-c">
              <!-- Items for C tier will go here -->
          </div>
      </div>

      <!-- D Tier -->
      <div class="tier-row">
          <div class="tier-label tier-d">D</div>
          <div class="tier-items" id="tier-d">
              <!-- Items for D tier will go here -->
          </div>
      </div>

      <!-- F Tier -->
      <div class="tier-row">
          <div class="tier-label tier-f">F</div>
          <div class="tier-items" id="tier-f">
              <!-- Items for F tier will go here -->
          </div>
      </div>
      
  </div>

    <!-- This hidden container holds the template of item_card_display for JavaScript to clone and use -->
    <div id="item-card-template" style="display: none;">
      <%= render partial: "items/item_card", locals: { 
        item: @current_item, 
        previous_item_id: @previous_item_id, 
        next_item_id: @next_item_id 
      } %>
    </div>


    <!-- Popup Partial (will be displayed on button click) -->
    <%= render partial: "items/item_popup", locals: { item: @current_item } %>



    </div>


    <!-- Side Container: 1/4 Width -->
    <div style="flex: 1 1 40%; padding: 20px; box-sizing: border-box;">
      <h1>Side Content Area (for things like comments and ranking items)</h1>
      
      <!-- Add more content as needed -->
      
      <!-- Render the item card as a button -->
      <%= render partial: "items/item_card", locals: { 
          item: @current_item, 
          previous_item_id: @previous_item_id, 
          next_item_id: @next_item_id 
        } %>

    <%= debug(@current_item) %>
    <%= debug(@previous_item_id) %>
    <%= debug(@next_item_id) %>

      


    </div>

  </div>

  <% @items.each do |item| %>
  <div
    class="item-data"
    data-item-id="<%= item.id %>"
    data-name="<%= item.name %>"
    data-description="<%= item.description %>"
    data-image-url="<%= item.image.attached? ? url_for(item.image) : '' %>"
    data-previous-item-id="<%= @items.where("items.id < ?", item.id).order("items.id DESC").pluck(:id).first %>"
    data-next-item-id="<%= @items.where("items.id > ?", item.id).order("items.id ASC").pluck(:id).first %>"
    style="display: none;"
  ></div>
<% end %>

</body>

<script>

function showPopup() {
    document.getElementById('popup-overlay').style.display = 'flex';
  }

  function hidePopup() {
    document.getElementById('popup-overlay').style.display = 'none';
  }

</script>

<script>

document.addEventListener("DOMContentLoaded", () => {
  const rankSelect = document.getElementById("rank-select");

  if (!rankSelect) {
    console.error("rank-select element not found");
    return;
  }

  console.log("rank-select element found");

  rankSelect.addEventListener("change", () => {
    const selectedRank = rankSelect.value;
    console.log("Selected Rank:", selectedRank);

    const rankToTierMap = {
      "1": "tier-s",
      "2": "tier-a",
      "3": "tier-b",
      "4": "tier-c",
      "5": "tier-d",
      "6": "tier-f"
    };

    const targetTierId = rankToTierMap[selectedRank];
    const targetTier = document.getElementById(targetTierId);

    // Remove any existing item cards from all tiers
    document.querySelectorAll(".tier-items .item-card-display").forEach(card => {
      card.remove();
    });

    if (targetTier) {
      // Clone the template
      const template = document.getElementById("item-card-template");
      const clonedCard = template.cloneNode(true);

      // Make cloned card visible
      clonedCard.style.display = "block";
      clonedCard.removeAttribute("id"); // Remove ID to avoid duplicate IDs

      // Get item data from data attributes
      const itemName = document.getElementById("ranking-form").dataset.itemName;
      const itemDescription = document.getElementById("ranking-form").dataset.itemDescription;

      // Update cloned card content
      const nameElement = clonedCard.querySelector(".item-name");
      const descriptionElement = clonedCard.querySelector(".item-description");

      if (nameElement) {
        nameElement.textContent = itemName;
      } else {
        console.error("Name element not found in cloned card.");
      }

      if (descriptionElement) {
        descriptionElement.textContent = itemDescription;
      } else {
        console.error("Description element not found in cloned card.");
      }

      // Append the updated card to the selected tier
      targetTier.appendChild(clonedCard);
      console.log(`Cloned item card added to ${targetTierId}`);
    } else {
      console.log(`Tier with ID '${targetTierId}' not found`);
    }
  });
});

</script>

<script>

document.addEventListener("DOMContentLoaded", () => {
  console.log("Attaching event listeners to navigation buttons...");

  const navigationButtons = document.querySelectorAll(".navigation .btn");

  navigationButtons.forEach((button) => {
    button.removeEventListener("click", loadItem); // Prevent duplicate listeners
    button.addEventListener("click", loadItem);
  });
});


function loadItem(event) {
  event.preventDefault();

  const itemId = event.target.getAttribute("data-item-id");
  const tierListId = document.querySelector(".navigation").getAttribute("data-tier-list-id");

  console.log("Clicked button with Item ID:", itemId);
  console.log("Tier List ID:", tierListId);

  if (!itemId || !tierListId) {
    console.error("Item ID or Tier List ID not found.");
    return;
  }

  fetch(`/tier_lists/${tierListId}/items/${itemId}`, {
    headers: {
      "X-Requested-With": "XMLHttpRequest",
    },
  })
    .then((response) => response.json())
    .then((data) => {
      console.log("Fetched Data:", data);

      // Update the item card content
      const itemCard = document.querySelector("#item-card-container");
      if (itemCard) {
        console.log("Updating item card...");
        itemCard.querySelector("#item-name").textContent = data.name || "No name added";
        itemCard.querySelector("#item-description").textContent =
          data.description || "No description available";

          console.log(itemCard.querySelector("#item-name"));
          console.log(itemCard.querySelector("#item-description"));
          console.log(itemCard.querySelector("#item-image"));

          itemCard.style.border = "2px solid red"; // Add temporary style for debugging
          setTimeout(() => (itemCard.style.border = ""), 1000); // Remove it after 1 second


        const imageElement = itemCard.querySelector("#item-image");
        if (data.image_url) {
          if (imageElement) {
            imageElement.src = data.image_url;
            imageElement.alt = `${data.name} image`;
          } else {
            const newImage = document.createElement("img");
            newImage.id = "item-image";
            newImage.src = data.image_url;
            newImage.alt = `${data.name} image`;
            itemCard.querySelector(".item-card-content").prepend(newImage);
          }
        } else if (imageElement) {
          imageElement.remove();
        }
      } else {
        console.error("Item card container not found.");
      }
    })
    .catch((error) => console.error("Error loading item:", error));



}




</script>

</html>
