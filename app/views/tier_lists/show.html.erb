<h1>Create a Tier List | Add Items</h1>

<a href="<%= clear_session_path %>">Go back</a>

<div>
  <label>Tier List Name:</label>
  <span><%= @tl_name %></span>
</div>

<%= debug @fields %>

<%# Output @fields for debugging %>
<% if @fields.present? %>
  <h4>Debug: @fields contains:</h4>
  <ul>
    <% @fields.each do |field| %>
      <li><%= field.inspect %></li>
    <% end %>
  </ul>
<% else %>
  <p>Debug: @fields is empty or nil</p>
<% end %>


<h1>Create a Tier List | Add Items</h1>

<% if @tl_name.present? %>
  <p>Tier List Name: <%= @tl_name %></p>
<% end %>


<%= form_with model: [@tier_list, @item], local: true, multipart: true do |form| %>
  <div id="item-container">
    <fieldset>
      <legend><h3>Add Item</h3></legend>

      <!-- Standard item fields -->
      <div>
        <%= form.label :name, "Name of item" %>
        <%= form.text_field :name %>
      </div>
      <div>
        <%= form.label :description, "Description" %>
        <%= form.text_area :description, rows: 4, cols: 50 %>
      </div>
      <div>
        <%= form.label :image, "Upload Image" %>
        <%= form.file_field :image %>
      </div>

      <!-- Custom Fields Section -->
      <% if @tier_list.custom_fields.present? %>
        <h4>Custom Fields</h4>
        <% @tier_list.custom_fields.each do |field| %>
          <div>
            <%= form.label field["name"], field["name"].capitalize %>
            <% case field["datatype"] %>
            <% when "text" %>
              <%= text_field_tag "item[custom_fields][#{field['name']}]" %>
            <% when "number" %>
              <%= number_field_tag "item[custom_fields][#{field['name']}]" %>
            <% when "date" %>
              <%= date_field_tag "item[custom_fields][#{field['name']}]" %>
            <% end %>
          </div>
        <% end %>
      <% end %>
    </fieldset>
  </div>

  <%= form.submit "Add Item" %>
<% end %>

<!-- Button to add another item section -->
<button type="button" onclick="addItem()">Add Another Item</button>


<script>
let itemCount = 0; // Start at 0 if the first item is already in place

function addItem() {
  // Increment the item counter
  itemCount++;

  // Get the container where new items will be appended
  const itemContainer = document.getElementById('item-container');
  
  // Find the first item in the container to use as a template
  const templateItem = document.querySelector('.item');

  if (!templateItem) {
    console.error("Template item with class 'item' not found.");
    return;
  }

  // Clone the template item to create a new item
  const newItem = templateItem.cloneNode(true);

  // Update the new item's legend with the correct number
  newItem.querySelector('legend h3').textContent = `Item ${itemCount + 1}`;

  // Update input names and IDs to include the new index to avoid conflicts
  newItem.querySelectorAll('input, textarea').forEach((input) => {
    input.value = ''; // Clear the input value for the cloned item

    // Update the name attribute to have the correct index
    let name = input.getAttribute('name');
    if (name) {
      name = name.replace(/\[\d+\]/, `[${itemCount}]`);
      input.setAttribute('name', name);
    }

    // Update the id attribute to have the correct index
    let id = input.getAttribute('id');
    if (id) {
      id = id.replace(/_\d+_/, `_${itemCount}_`);
      input.setAttribute('id', id);

      // Update the label `for` attribute to match the new ID
      const label = newItem.querySelector(`label[for="${input.getAttribute('id')}"]`);
      if (label) {
        label.setAttribute('for', id);
      }
    }
  });

  // Append the new item to the container
  itemContainer.appendChild(newItem);
}



  
</script>
