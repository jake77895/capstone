<h1>Create a Tier List | Add Items</h1>

<a href="<%= clear_session_path %>">Go back</a>

<div>
  <label>Tier List Name:</label>
  <span><%= @tier_list.name %></span> <!-- Display the tier list name here -->
</div>

<%= debug @fields %>

<%# Output @fields for debugging %>
<% if @fields.present? %>
  <h4>Debug: @fields contains:</h4>
  <ul>
    <% @fields.each do |field| %>
      <li><%= field.inspect %></li>
    <% end %>
  </ul>
<% else %>
  <p>Debug: @fields is empty or nil</p>
<% end %>

<%= form_with model: [@tier_list, @item], local: true, multipart: true do |form| %>
  <div id="item-container">
    <!-- Render five item fields initially -->
    <% 5.times do |index| %>
      <div class="item">
        <fieldset>
          <legend><h3>Item <%= index + 1 %></h3></legend>

          <!-- Standard item fields -->
          <div>
            <label>Name of item</label>
            <input type="text" name="items[<%= index %>][name]" placeholder="Item name">
          </div>
          <div>
            <label>Description</label>
            <textarea name="items[<%= index %>][description]" rows="4" cols="50" placeholder="Item description"></textarea>
          </div>
          <div>
            <label>Upload Image</label>
            <input type="file" name="items[<%= index %>][image]">
          </div>

 <!-- Custom Fields Section -->
          <% if @fields.present? %>
            <h4>Custom Fields</h4>
            <% @fields.each do |field| %>
              <% if field[:name].present? %> <!-- Check if field name is present -->
                <div>
                  <label><%= field[:name].capitalize %></label>
                  <% case field[:datatype] %>
                    <% when "text" %>
                      <input type="text" name="items[<%= index %>][custom_fields][<%= field['name'] %>]">
                    <% when "number" %>
                      <input type="number" name="items[<%= index %>][custom_fields][<%= field['name'] %>]">
                    <% when "date" %>
                      <input type="date" name="items[<%= index %>][custom_fields][<%= field['name'] %>]">
                  <% end %>
                </div>
              <% else %>
                <p>Test: Field name is not present</p> <!-- Output a message when the field name is not present -->
              <% end %> <!-- End check for field name presence -->
            <% end %>
          <% else %>
            <p>No custom fields available.</p>
          <% end %>
        </fieldset>
      </div>
    <% end %>
  </div>

  <!-- Button to add another item section -->
  <button type="button" onclick="addItem()">Add Another Item</button>

  <%= form.submit "Add Item" %>
<% end %>


<script>
  let itemCount = 5; // Start at 5 since we are initially rendering 5 items

  function addItem() {
    // Increment the item counter
    itemCount++;

    // Get the container where new items will be appended
    const itemContainer = document.getElementById('item-container');

    // Custom fields are loaded directly from @tier_list.custom_fields and passed to the JS in a data attribute
    const customFields = <%= @tier_list.custom_fields.to_json.html_safe %>;

    // Generate new item HTML
    const newItem = document.createElement('div');
    newItem.classList.add('item');
    newItem.innerHTML = `
      <fieldset>
        <legend><h3>Item ${itemCount}</h3></legend>

        <!-- Standard item fields -->
        <div>
          <label>Name of item</label>
          <input type="text" name="items[${itemCount - 1}][name]" placeholder="Item name">
        </div>
        <div>
          <label>Description</label>
          <textarea name="items[${itemCount - 1}][description]" rows="4" cols="50" placeholder="Item description"></textarea>
        </div>
        <div>
          <label>Upload Image</label>
          <input type="file" name="items[${itemCount - 1}][image]">
        </div>
        <h4>Custom Fields</h4>
        ${customFields.map(field => {
          if (!field.name) return ''; // Skip if the field name is blank

          const inputType = field.datatype === 'text' ? 'text'
                          : field.datatype === 'number' ? 'number'
                          : field.datatype === 'date' ? 'date' : 'text';

          return `
            <div>
              <label>${field.name.charAt(0).toUpperCase() + field.name.slice(1)}</label>
              <input type="${inputType}" name="items[${itemCount - 1}][custom_fields][${field.name}]">
            </div>
          `;
        }).join('')}
      </fieldset>
    `;

    // Append the new item to the container
    itemContainer.appendChild(newItem);
  }
</script>
