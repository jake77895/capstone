<h1>Create a Tier List | Add Items</h1>

<a href="<%= clear_session_path %>">Go back</a>

<div>
  <label>Tier List Name:</label>
  <span><%= @tl_name %></span>
</div>

<%= debug @fields %>

<%# Output @fields for debugging %>
<% if @fields.present? %>
  <h4>Debug: @fields contains:</h4>
  <ul>
    <% @fields.each do |field| %>
      <li><%= field.inspect %></li>
    <% end %>
  </ul>
<% else %>
  <p>Debug: @fields is empty or nil</p>
<% end %>


<h1>Create a Tier List | Add Items</h1>

<% if @tl_name.present? %>
  <p>Tier List Name: <%= @tl_name %></p>
<% end %>


<%= form_with url: submit_tl_path, method: :post, local: true, multipart: true do |form| %>
  <div id="item-container">
    <!-- Item Fields -->
    <div class="item" data-index="0">
    <fieldset>
      <legend><h3>Item 1</h3></legend>

      <!-- Standard item name field -->
      <div>
        <label for="items_0_name">Name of item</label>
        <input type="text" name="items[0][name]" id="items_0_name">
      </div>

      <!-- Standard item description field -->
      <div>
        <label for="items_0_description">Description</label>
        <textarea name="items[0][description]" id="items_0_description" rows="4" cols="50"></textarea>
      </div>

      <!-- Image upload field -->
      <div>
        <label for="items_0_image">Upload Image</label>
        <input type="file" name="items[0][image]" id="items_0_image">
      </div>
    </fieldset>
        
        <!-- Custom Fields Section -->
        <% if @fields.present? %>
          <h4>Custom Fields</h4>
          <% @fields.each_with_index do |field, i| %>
            <div>
              <!-- Label for custom field -->
              <label for="items_0_custom_fields_<%= i %>">
                <%= field[:name].present? ? field[:name].capitalize : "Unnamed Field" %>
              </label>

              <!-- Input field based on the datatype -->
              <% case field[:datatype] %>
              <% when "text" %>
                <input type="text" name="items[0][custom_fields][<%= field[:name] %>]" id="items_0_custom_fields_<%= i %>">
              <% when "number" %>
                <input type="number" name="items[0][custom_fields][<%= field[:name] %>]" id="items_0_custom_fields_<%= i %>">
              <% when "date" %>
                <input type="date" name="items[0][custom_fields][<%= field[:name] %>]" id="items_0_custom_fields_<%= i %>">
              <% else %>
                <input type="text" name="items[0][custom_fields][<%= field[:name] %>]" id="items_0_custom_fields_<%= i %>">
              <% end %>
            </div>
          <% end %>
        <% end %>
        
      </fieldset>
    </div>
  </div>

  <!-- Button to add another item section -->
  <button type="button" onclick="addItem()">Add Another Item</button>
  <%= form.submit "Create Tier List" %>
<% end %>


<script>
let itemCount = 0; // Start at 0 if the first item is already in place

function addItem() {
  // Increment the item counter
  itemCount++;

  // Get the container where new items will be appended
  const itemContainer = document.getElementById('item-container');
  
  // Find the first item in the container to use as a template
  const templateItem = document.querySelector('.item');

  if (!templateItem) {
    console.error("Template item with class 'item' not found.");
    return;
  }

  // Clone the template item to create a new item
  const newItem = templateItem.cloneNode(true);

  // Update the new item's legend with the correct number
  newItem.querySelector('legend h3').textContent = `Item ${itemCount + 1}`;

  // Update input names and IDs to include the new index to avoid conflicts
  newItem.querySelectorAll('input, textarea').forEach((input) => {
    input.value = ''; // Clear the input value for the cloned item

    // Update the name attribute to have the correct index
    let name = input.getAttribute('name');
    if (name) {
      name = name.replace(/\[\d+\]/, `[${itemCount}]`);
      input.setAttribute('name', name);
    }

    // Update the id attribute to have the correct index
    let id = input.getAttribute('id');
    if (id) {
      id = id.replace(/_\d+_/, `_${itemCount}_`);
      input.setAttribute('id', id);

      // Update the label `for` attribute to match the new ID
      const label = newItem.querySelector(`label[for="${input.getAttribute('id')}"]`);
      if (label) {
        label.setAttribute('for', id);
      }
    }
  });

  // Append the new item to the container
  itemContainer.appendChild(newItem);
}



  
</script>
