<h1>Create a Tier List | Add Items</h1>

<a href="<%= clear_session_path %>">Go back</a>

<div>
  <label>Tier List Name:</label>
  <span><%= @tl_name %></span>
</div>

<%= debug @fields %>

<%# Output @fields for debugging %>
<% if @fields.present? %>
  <h4>Debug: @fields contains:</h4>
  <ul>
    <% @fields.each do |field| %>
      <li><%= field.inspect %></li>
    <% end %>
  </ul>
<% else %>
  <p>Debug: @fields is empty or nil</p>
<% end %>


<h1>Create a Tier List | Add Items</h1>

<% if @tl_name.present? %>
  <p>Tier List Name: <%= @tl_name %></p>
<% end %>


<%= form_with url: submit_tl_path, method: :post, local: true, multipart: true do |form| %>
  <div id="item-container">
    <!-- Item Fields -->
    <div class="item">
      <fieldset>
        <legend><h3>Item 1</h3></legend>

        <!-- Standard item name field -->
        <div>
          <%= form.label :name, "Name of item" %>
          <%= form.text_field :name, name: "item[name]" %> <!-- Grouped under item -->
        </div>

        <!-- Standard item description field -->
        <div>
          <%= form.label :description, "Description" %>
          <%= form.text_area :description, rows: 4, cols: 50, name: "item[description]" %> <!-- Grouped under item -->
        </div>

        <!-- Image upload field -->
        <div>
          <%= form.label :image, "Upload Image" %>
          <%= form.file_field :image %>
        </div>

        <!-- Custom Fields Section -->
        <% if @fields.present? %>
          <h4>Custom Fields</h4>
          <% @fields.each_with_index do |field, i| %>
            <div>
              <!-- Label for custom field -->
              <label for="custom_fields_<%= i %>_value">
                <%= field[:name].present? ? field[:name].capitalize : "Unnamed Field" %>
              </label>

              <!-- Input field based on the datatype -->
              <% case field[:datatype] %>
              <% when "text" %>
                <input type="text" name="item[custom_fields][<%= field[:name] %>]" id="custom_fields_<%= i %>_value">
              <% when "number" %>
                <input type="number" name="item[custom_fields][<%= field[:name] %>]" id="custom_fields_<%= i %>_value">
              <% when "date" %>
                <input type="date" name="item[custom_fields][<%= field[:name] %>]" id="custom_fields_<%= i %>_value">
              <% else %>
                <input type="text" name="item[custom_fields][<%= field[:name] %>]" id="custom_fields_<%= i %>_value">
              <% end %>

              <!-- We do not need a hidden field here, as the name structure already groups values correctly -->
            </div>
          <% end %>
        <% end %>
      </fieldset>
    </div>
  </div>

  <!-- Button to add another item section -->
  <button type="button" onclick="addItem()">Add Another Item</button>
  <%= form.submit "Create Tier List" %>
<% end %>


<script>
  let itemCount = 1; // Track the number of items

  function addItem() {
    itemCount++;
    const itemContainer = document.getElementById('item-container');
    const templateItem = document.querySelector('.item');

    if (!templateItem) {
      console.error("Template item with class 'item' not found.");
      return;
    }

    const newItem = templateItem.cloneNode(true);

    // Update the new itemâ€™s legend and input names
    newItem.querySelector('legend h3').textContent = `Item ${itemCount}`;
    newItem.querySelectorAll('input, textarea').forEach((input) => {
      input.value = ''; // Clear the input value for the cloned item

      if (input.getAttribute('name')) {
        input.setAttribute('name', input.getAttribute('name').replace(/\[\d*\]/, `[]`));
      }
      if (input.getAttribute('id')) {
        input.setAttribute('id', input.getAttribute('id').replace(/_\d+_/, `_${itemCount}_`));
      }
    });

    itemContainer.appendChild(newItem);
  }
</script>
